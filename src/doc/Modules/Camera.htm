<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
   <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
   <title>::: ColdSteel Engine :::</title>
</head>

<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#666666" link="#666666" vlink="#666666">
<span style="font-family: Georgia;">
<big><span style="font-weight: bold;">Camera</span></big><br><br>
A camera is a special type of scene node which is not visible in the scene, but sets how the scene will be rendered. You can position and rotate it using the standard node functions, and the render the scene from this camera.<br><br>
<big><span style="font-weight: bold;">Constants</span></big><br><br>
<table style="width: 100%; text-align: left; margin-left: 0px; margin-right: 0px;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(141, 182, 205);">
<span style="font-weight: bold;">CF_BACKBUFFER</span> - Clear flag. Tells the engine to clear the backbuffer before rendering.<br>
<span style="font-weight: bold;">CF_ZBUFFER</span> - Clear flag. Tells the engine to clear the z-buffer before rendering.<br>
</td>
</tr>
</tbody>
</table><br><br>
<big><span style="font-weight: bold;">Functions</span></big><br><br>
<table style="width: 100%; text-align: left; margin-left: 0px; margin-right: 0px;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(141, 182, 205);">
<span style="font-weight: bold;">int CameraNode(int parent)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Creates a new camera scene node.<br>
<br><big>Returns</big><br>A handle to the camera scene node created.<br>
<br><big>Parameters</big><br>
<span style="font-weight: bold;">parent</span> - Handle of another scene node, which will be the parent of the camera. When the parent moves or rotates, the camera will move and rotate with it to always maintain the same relative position with it. If you don't want the camera to have a parent, set this to '0'.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraViewport(int cam, float x1, float y1, float x2, float y2)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Defines a rectangular region of the screen to which the scene rendered through this camera will be drawn. Values are relative to the current device dimension, and can be a value between '0' and '1'. For example, a camera viewport of 0, 0, 1, 1 would represent a viewport covering the whole device. a value of 0, 0, 1, 0.5 represents a viewport which only covers the upper half of the device.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraRange(int cam, float near, float far)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Defines the rendering range of this camera. The geometry which is outside the near, far limits is not drawn. Usually you set near to '1', and far to the distance you want to be visible.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraFov(int cam, float fov)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Sets the FOV (field-of-view) of the camera. It defaults to PI / 2.5.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraAspectRatio(int cam, float ratio)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Sets the aspect ratio of the camera. The default value is 4.0 / 3.0.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraProjection(int cam, float width, float height, float near, float far, int ortho)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Set the projection matrix of the camera. This is an alternative to use CameraRange() and CameraFov(), but also has the capability to tell if you want the camera to use an orthogonal projection, which means that the camera won't have perspective.<br>
<br><big>Parameters</big><br>
<span style="font-weight: bold;">camera</span> - Handle of the camera.<br>
<span style="font-weight: bold;">width, height</span> - Width and height in space points that the camera will see.<br>
<span style="font-weight: bold;">near, far</span> - Range of the camera.<br>
<span style="font-weight: bold;">ortho</span> - Set to '1' for an orthogonal camera, '0' otherwise.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraLine(int cam, int x, int y, int line_vec_start, int line_vec_end)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Returns a line which goes from the camera position to the far value of the camera, at the position behind the given screen coordinates.<br>
<br><big>Parameters</big><br>
<span style="font-weight: bold;">camera</span> - Handle of the camera.<br>
<span style="font-weight: bold;">x, y</span> - Screen coordinates that you want to project in 3D.<br>
<span style="font-weight: bold;">line_vector_start, line_vector_end</span> - The vector where you want to store the start and end coordinates of the line.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">int CameraPickNode(int cam, int x, int y, int group)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Return the node which can be seen on the screen at that coordinates throught the specified camera, or '0' if no node were found. If x and y are negative, they will be ignored and the node at the center of the camera viewport will be returned.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraToScreen(int cam, float x, float y, float z, int vec_out)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Fills the x and y fields of out_vector with the screen coordinates where the specified 3D point is located.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraRenderTarget(int cam, int texture)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Sets the texture render target of this camera, or '0' to render to the display.<br>
</td>
</tr>
</tbody>
</table><br><span style="font-weight: bold;">void CameraClearFlags(int cam, int flags, int color)</span><br>
<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(155, 200, 225);">
<big>Description</big><br>Set the clear flags and background color for the camera.<br>
<br><big>Parameters</big><br>
<span style="font-weight: bold;">flags</span> - Tells which buffers should be cleared. You can use CF_BACKBUFFER or CF_ZBUFFER, or a combination of both.<br>
<span style="font-weight: bold;">color</span> - If you have selected to clear the backbuffer, it will be cleared with this color.<br>
</td>
</tr>
</tbody>
</table><br></td>
</tr>
</tbody>
</table>
</span>
</body>
</html>
